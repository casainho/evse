   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"main.c"
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.section	.text.NVIC_SetPriority,"ax",%progbits
  24              		.align	2
  25              		.thumb
  26              		.thumb_func
  28              	NVIC_SetPriority:
  29              	.LFB20:
  30              		.file 1 "./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h"
   1:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @file     core_cm3.h
   3:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @version  V1.30
   5:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @date     30. October 2009
   6:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
   7:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @note
   8:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
  10:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @par
  11:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
  15:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @par
  16:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
  22:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
  23:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  24:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __CM3_CORE_H__
  26:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  27:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
  29:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *   - Error 10: \n
  31:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     Error 10: Expecting ';'
  33:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * .
  34:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *   - Error 530: \n
  35:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     return(__regBasePri); \n
  36:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * . 
  38:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *   - Error 550: \n
  39:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * .
  42:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *   - Error 754: \n
  43:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * .
  46:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *   - Error 750: \n
  47:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * .
  50:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *   - Error 528: \n
  51:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * .
  54:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *   - Error 751: \n
  55:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     } InterruptType_Type; \n
  56:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * .
  58:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
  60:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
  61:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  62:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*lint -save */
  63:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*lint -e10  */
  64:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*lint -e530 */
  65:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*lint -e550 */
  66:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*lint -e754 */
  67:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*lint -e750 */
  68:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*lint -e528 */
  69:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*lint -e751 */
  70:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  71:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  72:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     - CMSIS version number
  75:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     - Cortex-M core peripheral base address
  77:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   @{
  78:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
  79:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  80:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
  81:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  extern "C" {
  82:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif 
  83:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  84:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  88:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  90:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  92:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #if defined (__ICCARM__)
  93:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif
  95:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  96:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
  97:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif
 100:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 101:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 102:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 103:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 104:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 105:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * IO definitions
 106:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 107:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * define access restrictions to peripheral registers
 108:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 109:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 110:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #ifdef __cplusplus
 111:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #else
 113:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif
 115:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 118:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 119:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 120:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 121:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *                 Register Abstraction
 122:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 123:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  @{
 125:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** */
 126:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 127:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 128:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   @{
 131:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 132:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** typedef struct
 133:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 134:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }  NVIC_Type;                                               
 148:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 150:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 151:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   @{
 154:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 155:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** typedef struct
 156:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 157:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** } SCB_Type;                                                
 177:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 178:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 182:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 185:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 188:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 191:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 195:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 198:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 201:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 204:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 207:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 210:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 213:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 216:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 219:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 222:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 226:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 229:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 233:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 236:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 239:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 242:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 245:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 248:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 251:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB System Control Register Definitions */
 252:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 255:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 258:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 261:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 265:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 268:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 271:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 274:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 277:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 280:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 284:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 287:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 290:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 293:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 296:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 299:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 302:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 305:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 308:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 311:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****                                      
 314:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 317:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 320:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 323:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 327:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 330:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 333:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 337:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 340:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 343:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 347:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 350:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 353:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 356:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 360:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 361:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for SysTick
 363:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   @{
 364:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 365:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** typedef struct
 366:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 367:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** } SysTick_Type;
 372:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 373:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 377:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 380:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 383:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 386:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 390:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SysTick Current Register Definitions */
 391:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 394:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 398:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 401:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 405:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 406:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   @{
 409:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 410:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** typedef struct
 411:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 412:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __O  union  
 413:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   {
 414:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** } ITM_Type;                                                
 445:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 446:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 450:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 454:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 457:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 460:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 463:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 466:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 469:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 472:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 475:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 479:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 483:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 487:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 491:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 494:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 498:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 499:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   @{
 502:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 503:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** typedef struct
 504:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 505:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED0;
 506:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #else
 510:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****        uint32_t RESERVED1;
 511:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif
 512:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** } InterruptType_Type;
 513:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 514:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 518:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 522:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 525:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 529:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 530:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   @{
 534:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 535:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** typedef struct
 536:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 537:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** } MPU_Type;                                                
 549:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 550:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* MPU Type Register */
 551:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 554:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 557:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 560:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* MPU Control Register */
 561:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 564:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 567:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 570:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* MPU Region Number Register */
 571:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 574:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* MPU Region Base Address Register */
 575:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 578:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 581:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 584:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 588:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 591:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 594:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 597:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 600:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 603:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 606:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 609:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 612:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif
 614:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 615:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 616:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   @{
 619:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 620:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** typedef struct
 621:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 622:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** } CoreDebug_Type;
 627:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 628:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 632:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 635:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 638:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 641:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 644:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 647:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 650:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 653:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 656:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 659:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 662:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 665:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* Debug Core Register Selector Register */
 666:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 669:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 672:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 676:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 679:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 682:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 685:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 688:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 691:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 694:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 697:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 700:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 703:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 706:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 709:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 713:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 714:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 722:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 729:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif
 733:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 734:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 736:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 737:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*******************************************************************************
 738:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *                Hardware Abstraction Layer
 739:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  ******************************************************************************/
 740:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 741:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   )
 742:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 745:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 749:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 753:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 757:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif
 758:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 759:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 760:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 762:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ARM armcc specific functions */
 764:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 765:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 768:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __NOP                             __nop
 769:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __WFI                             __wfi
 770:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __WFE                             __wfe
 771:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __SEV                             __sev
 772:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __ISB()                           __isb(0)
 773:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __REV                             __rev
 776:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __RBIT                            __rbit
 777:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 784:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 785:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 790:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 791:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 792:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 794:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
 795:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 796:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
 797:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 798:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 800:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 801:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 803:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 805:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 808:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 810:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 811:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 813:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
 814:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 815:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
 817:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 818:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 820:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 821:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 823:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 825:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 828:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 830:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 831:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 833:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 834:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 835:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 836:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 838:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 840:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 841:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 843:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param   value  value to reverse
 844:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return         reversed value
 845:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 846:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 848:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 850:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 851:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 853:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 854:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 856:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 858:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __CLREX(void);
 859:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 860:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 861:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 862:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 863:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 864:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 865:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 866:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 867:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 869:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 870:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 871:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 872:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 873:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 874:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 875:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 876:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 878:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 879:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 881:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 882:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 883:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 885:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 887:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 888:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 890:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param   priMask  PriMask
 891:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 892:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 894:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 896:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 897:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 899:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 900:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 901:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 902:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 903:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 905:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 906:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 908:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask faultMask value
 909:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 910:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
 911:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 912:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 914:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 915:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
 916:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * 
 917:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return Control value
 918:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 919:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
 920:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 921:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 923:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 924:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
 925:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 926:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
 927:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 928:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the control register
 929:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 930:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 932:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 934:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 935:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 937:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 939:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __CLREX                           __clrex
 940:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 941:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 942:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
 943:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 944:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
 945:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 946:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
 947:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 948:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 950:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   return(__regBasePri);
 952:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
 953:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 954:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 955:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
 956:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 957:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
 958:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 959:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
 960:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 961:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 963:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
 966:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 967:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 968:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 970:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
 971:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 972:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 974:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 976:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   return(__regPriMask);
 978:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
 979:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 980:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 981:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 983:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  priMask  PriMask
 984:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 985:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
 987:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
 989:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __regPriMask = (priMask);
 991:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
 992:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
 993:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
 994:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 996:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
 997:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
 998:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
 999:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1000:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1002:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   return(__regFaultMask);
1004:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1005:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1006:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1007:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1009:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask  faultMask value
1010:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1011:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
1012:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1013:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1015:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1018:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1019:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1020:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
1021:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * 
1022:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return Control value
1023:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1024:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
1025:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1026:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1028:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   return(__regControl);
1030:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1031:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1032:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1033:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
1034:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1035:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
1036:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1037:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the control register
1038:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1039:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1041:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   __regControl = control;
1043:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1044:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1045:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1047:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1048:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1049:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* IAR iccarm specific functions */
1051:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1052:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1055:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1058:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1064:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1076:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1077:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1078:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1080:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
1081:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1082:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
1083:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1084:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1086:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1087:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1089:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1091:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1094:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1096:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1097:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1099:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
1100:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1101:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
1103:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1104:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1106:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1107:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1109:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1111:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1114:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1116:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1117:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1119:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1120:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1121:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1122:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1124:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1126:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1127:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse bit order of value
1128:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1129:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1130:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1131:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1132:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Reverse bit order of value
1133:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1134:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1136:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1137:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1139:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1140:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1141:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1142:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1144:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1146:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1147:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1149:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1150:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1151:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1152:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1154:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1156:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1157:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1159:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1160:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1161:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1162:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1164:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1166:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1167:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1169:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1170:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1171:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1172:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1173:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1175:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1177:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1178:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1180:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1181:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1182:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1183:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1184:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1186:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1188:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1189:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1191:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1192:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1193:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1194:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1195:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1197:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1199:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1200:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1201:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* GNU gcc specific functions */
1203:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1204:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1207:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1210:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1219:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1220:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1221:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1223:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return ProcessStackPointer
1224:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1225:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the actual process stack pointer
1226:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1227:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1229:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1230:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1232:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1234:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1237:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1239:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1240:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1242:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return Main Stack Pointer
1243:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1244:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Cortex processor register
1246:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1247:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1249:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1250:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1252:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1254:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1257:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1259:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1260:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Base Priority value
1261:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1262:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return BasePriority
1263:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1264:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the content of the base priority register
1265:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1266:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1268:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1269:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Base Priority value
1270:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1271:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  basePri  BasePriority
1272:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1273:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the base priority register
1274:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1275:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1277:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1278:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1280:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return PriMask
1281:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1282:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1284:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1286:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1287:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1289:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  priMask  PriMask
1290:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1291:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1293:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1295:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1296:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1298:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return FaultMask
1299:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1300:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the content of the fault mask register
1301:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1302:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1304:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1305:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1307:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  faultMask  faultMask value
1308:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1309:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the fault mask register
1310:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1311:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1313:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1314:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Return the Control Register value
1315:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** * 
1316:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** *  @return Control value
1317:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1318:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Return the content of the control register
1319:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1320:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1322:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1323:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Control Register value
1324:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1325:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  control  Control value
1326:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1327:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the control register
1328:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1329:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1331:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1332:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1334:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1335:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1336:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1337:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in integer value
1338:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1339:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1341:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1342:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1344:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1345:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1346:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1347:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1349:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1351:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1352:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1354:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1355:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1356:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1357:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1359:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1361:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1362:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Reverse bit order of value
1363:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1364:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to reverse
1365:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        reversed value
1366:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1367:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Reverse bit order of value
1368:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1369:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1371:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1372:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1374:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1375:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1376:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1377:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1379:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1381:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1382:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1384:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1385:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1386:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1387:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1389:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1391:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1392:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1394:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1395:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        value of (*address)
1396:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1397:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1399:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1401:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1402:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1404:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1405:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1406:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1407:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1408:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1410:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1412:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1413:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1415:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1416:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1417:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1418:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1419:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1421:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1423:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1424:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1426:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  value  value to store
1427:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  *addr  address pointer
1428:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return        successful / failed
1429:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1430:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1432:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1434:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1435:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* TASKING carm specific functions */
1437:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1438:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*
1439:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Including the CMSIS ones.
1442:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1443:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1444:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #endif
1445:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1446:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1447:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   Core  Function Interface containing:
1449:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   - Core NVIC Functions
1450:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   - Core SysTick Functions
1451:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   - Core Reset Functions
1452:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** */
1453:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /*@{*/
1454:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1455:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1457:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1458:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1460:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1462:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1468:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1470:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   uint32_t reg_value;
1471:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   
1473:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1480:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1481:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1482:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1484:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return priority grouping field 
1485:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1486:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1489:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1491:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1493:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1494:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1495:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1497:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1499:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1502:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1504:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1506:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1507:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1508:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * 
1510:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * 
1512:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1515:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1517:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1519:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1520:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1521:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * 
1523:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1526:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
1527:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * otherwise it returns 0
1528:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1529:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1531:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1533:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1534:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1535:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * 
1537:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1539:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1542:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1544:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1546:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1547:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1548:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1550:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1552:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Clear the pending bit for the specified interrupt. 
1553:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1555:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1557:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1559:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1560:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1561:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1563:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1566:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active, 
1567:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * otherwise it returns 0.
1568:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1569:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1571:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1573:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1574:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1575:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1577:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  priority  The priority to set
1579:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1580:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt 
1581:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1582:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1584:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1586:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
  31              		.loc 1 1587 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36 0000 80B4     		push	{r7}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39 0002 83B0     		sub	sp, sp, #12
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_offset 7, -4
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 0346     		mov	r3, r0
  47 0008 3960     		str	r1, [r7, #0]
  48 000a FB71     		strb	r3, [r7, #7]
1588:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   if(IRQn < 0) {
  49              		.loc 1 1588 0
  50 000c 97F90730 		ldrsb	r3, [r7, #7]
  51 0010 002B     		cmp	r3, #0
  52 0012 10DA     		bge	.L2
1589:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  53              		.loc 1 1589 0
  54 0014 4EF60053 		movw	r3, #:lower16:-536810240
  55 0018 CEF20003 		movt	r3, #:upper16:-536810240
  56 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  57 001e 02F00F02 		and	r2, r2, #15
  58 0022 A2F10401 		sub	r1, r2, #4
  59 0026 3A68     		ldr	r2, [r7, #0]
  60 0028 D2B2     		uxtb	r2, r2
  61 002a 4FEA0212 		lsl	r2, r2, #4
  62 002e D2B2     		uxtb	r2, r2
  63 0030 0B44     		add	r3, r1, r3
  64 0032 1A76     		strb	r2, [r3, #24]
  65 0034 0DE0     		b	.L4
  66              	.L2:
1590:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   else {
1591:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
  67              		.loc 1 1591 0
  68 0036 4EF20013 		movw	r3, #:lower16:-536813312
  69 003a CEF20003 		movt	r3, #:upper16:-536813312
  70 003e 97F90710 		ldrsb	r1, [r7, #7]
  71 0042 3A68     		ldr	r2, [r7, #0]
  72 0044 D2B2     		uxtb	r2, r2
  73 0046 4FEA0212 		lsl	r2, r2, #4
  74 004a D2B2     		uxtb	r2, r2
  75 004c 0B44     		add	r3, r1, r3
  76 004e 83F80023 		strb	r2, [r3, #768]
  77              	.L4:
1592:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
  78              		.loc 1 1592 0
  79 0052 07F10C07 		add	r7, r7, #12
  80 0056 BD46     		mov	sp, r7
  81 0058 80BC     		pop	{r7}
  82 005a 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE20:
  86              		.section	.text.SysTick_Config,"ax",%progbits
  87              		.align	2
  88              		.thumb
  89              		.thumb_func
  91              	SysTick_Config:
  92              	.LFB24:
1593:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1594:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1595:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Read the priority for an interrupt
1596:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1597:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  IRQn      The number of the interrupt for get priority
1598:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return           The priority for the interrupt
1599:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1600:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Read the priority for the specified interrupt. The interrupt 
1601:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1602:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1603:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1604:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * The returned priority value is automatically aligned to the implemented
1605:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * priority bits of the microcontroller.
1606:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1607:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1608:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1609:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1610:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1611:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1612:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   if(IRQn < 0) {
1613:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1614:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   else {
1615:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1616:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1617:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1618:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1619:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1620:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Encode the priority for an interrupt
1621:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1622:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  PriorityGroup    The used priority group
1623:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  PreemptPriority  The preemptive priority value (starting from 0)
1624:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  SubPriority      The sub priority value (starting from 0)
1625:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return                  The encoded priority for the interrupt
1626:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1627:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Encode the priority for an interrupt with the given priority group,
1628:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * preemptive priority value and sub priority value.
1629:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * In case of a conflict between priority grouping and available
1630:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1631:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1632:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * The returned priority value can be used for NVIC_SetPriority(...) function
1633:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1634:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1635:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1636:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1637:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   uint32_t PreemptPriorityBits;
1638:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   uint32_t SubPriorityBits;
1639:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1640:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1641:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1642:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  
1643:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   return (
1644:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1645:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1646:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****          );
1647:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1648:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1649:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1650:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1651:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Decode the priority of an interrupt
1652:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1653:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  Priority           The priority for the interrupt
1654:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  PriorityGroup      The used priority group
1655:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  pPreemptPriority   The preemptive priority value (starting from 0)
1656:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param  pSubPriority       The sub priority value (starting from 0)
1657:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1658:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Decode an interrupt priority value with the given priority group to 
1659:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * preemptive priority value and sub priority value.
1660:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * In case of a conflict between priority grouping and available
1661:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1662:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1663:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * The priority value can be retrieved with NVIC_GetPriority(...) function
1664:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1665:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1666:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** {
1667:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1668:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   uint32_t PreemptPriorityBits;
1669:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   uint32_t SubPriorityBits;
1670:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1671:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1672:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1673:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   
1674:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1675:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1676:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
1677:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1678:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1679:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1680:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /* ##################################    SysTick function  ########################################
1681:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1682:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
1683:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** 
1684:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** /**
1685:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
1686:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1687:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @param   ticks   number of ticks between two interrupts
1688:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * @return  1 = failed, 0 = successful
1689:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  *
1690:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * Initialise the system tick timer and its interrupt and start the
1691:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * system tick timer / counter in free running mode to generate 
1692:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  * periodical interrupts.
1693:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****  */
1694:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1695:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** { 
  93              		.loc 1 1695 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 8
  96              		@ frame_needed = 1, uses_anonymous_args = 0
  97 0000 80B5     		push	{r7, lr}
  98              	.LCFI3:
  99              		.cfi_def_cfa_offset 8
 100 0002 82B0     		sub	sp, sp, #8
 101              	.LCFI4:
 102              		.cfi_def_cfa_offset 16
 103 0004 00AF     		add	r7, sp, #0
 104              		.cfi_offset 14, -4
 105              		.cfi_offset 7, -8
 106              	.LCFI5:
 107              		.cfi_def_cfa_register 7
 108 0006 7860     		str	r0, [r7, #4]
1696:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 109              		.loc 1 1696 0
 110 0008 7A68     		ldr	r2, [r7, #4]
 111 000a 6FF07F43 		mvn	r3, #-16777216
 112 000e 9A42     		cmp	r2, r3
 113 0010 02D9     		bls	.L6
 114 0012 4FF00103 		mov	r3, #1
 115 0016 22E0     		b	.L7
 116              	.L6:
1697:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****                                                                
1698:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 117              		.loc 1 1698 0
 118 0018 4EF21003 		movw	r3, #:lower16:-536813552
 119 001c CEF20003 		movt	r3, #:upper16:-536813552
 120 0020 7A68     		ldr	r2, [r7, #4]
 121 0022 22F07F42 		bic	r2, r2, #-16777216
 122 0026 02F1FF32 		add	r2, r2, #-1
 123 002a 5A60     		str	r2, [r3, #4]
1699:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 124              		.loc 1 1699 0
 125 002c 4FF0FF30 		mov	r0, #-1
 126 0030 4FF00F01 		mov	r1, #15
 127 0034 40F20003 		movw	r3, #:lower16:NVIC_SetPriority
 128 0038 C0F20003 		movt	r3, #:upper16:NVIC_SetPriority
 129 003c 9847     		blx	r3
1700:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 130              		.loc 1 1700 0
 131 003e 4EF21003 		movw	r3, #:lower16:-536813552
 132 0042 CEF20003 		movt	r3, #:upper16:-536813552
 133 0046 4FF00002 		mov	r2, #0
 134 004a 9A60     		str	r2, [r3, #8]
1701:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 135              		.loc 1 1701 0
 136 004c 4EF21003 		movw	r3, #:lower16:-536813552
 137 0050 CEF20003 		movt	r3, #:upper16:-536813552
 138 0054 4FF00702 		mov	r2, #7
 139 0058 1A60     		str	r2, [r3, #0]
1702:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   | 
1703:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1704:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h ****   return (0);                                                  /* Function successful */
 140              		.loc 1 1704 0
 141 005a 4FF00003 		mov	r3, #0
 142              	.L7:
1705:./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h **** }
 143              		.loc 1 1705 0
 144 005e 1846     		mov	r0, r3
 145 0060 07F10807 		add	r7, r7, #8
 146 0064 BD46     		mov	sp, r7
 147 0066 80BD     		pop	{r7, pc}
 148              		.cfi_endproc
 149              	.LFE24:
 151              		.global	ev_state
 152              		.section	.data.ev_state,"aw",%progbits
 153              		.align	2
 156              	ev_state:
 157 0000 01000000 		.word	1
 158              		.section	.text.manage_led,"ax",%progbits
 159              		.align	2
 160              		.global	manage_led
 161              		.thumb
 162              		.thumb_func
 164              	manage_led:
 165              	.LFB29:
 166              		.file 2 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * EVSE
   3:main.c        ****  *
   4:main.c        ****  * Copyright (C) Jorge Pinto aka Casainho, 2013.
   5:main.c        ****  *
   6:main.c        ****  *   casainho [at] gmail [dot] com
   7:main.c        ****  *     www.casainho.net
   8:main.c        ****  *
   9:main.c        ****  * Released under the GPL License, Version 3
  10:main.c        ****  */
  11:main.c        **** 
  12:main.c        **** #include <stdint.h>
  13:main.c        **** #include "stm32f10x.h"
  14:main.c        **** #include "stm32f10x_gpio.h"
  15:main.c        **** #include "stm32f10x_dac.h"
  16:main.c        **** #include "core_cm3.h"
  17:main.c        **** #include "gpio.h"
  18:main.c        **** #include "adc.h"
  19:main.c        **** #include "pwm.h"
  20:main.c        **** #include "config.h"
  21:main.c        **** 
  22:main.c        **** // ADC 1978 --> 9V
  23:main.c        **** #define ADC_STEPS_PER_VOLT 220 //(0.187 / 0.0008) //3.3V / 2^12 = 0.0008; voltage divider = 0.18
  24:main.c        **** #define STATE_A_VMAX (13 * ADC_STEPS_PER_VOLT)
  25:main.c        **** #define STATE_A_VMIN (11 * ADC_STEPS_PER_VOLT)
  26:main.c        **** #define STATE_B_VMAX (10 * ADC_STEPS_PER_VOLT)
  27:main.c        **** #define STATE_B_VMIN (8 * ADC_STEPS_PER_VOLT)
  28:main.c        **** #define STATE_C_VMAX (7 * ADC_STEPS_PER_VOLT)
  29:main.c        **** #define STATE_C_VMIN (5 * ADC_STEPS_PER_VOLT)
  30:main.c        **** 
  31:main.c        **** #define STATE_A 1
  32:main.c        **** #define STATE_B 2
  33:main.c        **** #define STATE_C 3
  34:main.c        **** #define STATE_ERROR 0
  35:main.c        **** 
  36:main.c        **** #define PILOT_ON GPIO_ResetBits(GPIOA, GPIO_Pin_8)
  37:main.c        **** #define PILOT_OFF GPIO_SetBits(GPIOA, GPIO_Pin_8)
  38:main.c        **** #define LED_ON GPIO_SetBits(GPIOB, GPIO_Pin_5)
  39:main.c        **** #define LED_OFF GPIO_ResetBits(GPIOB, GPIO_Pin_5)
  40:main.c        **** 
  41:main.c        **** volatile int ev_state = STATE_A;
  42:main.c        **** 
  43:main.c        **** void manage_led (void)
  44:main.c        **** {
 167              		.loc 2 44 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171 0000 80B5     		push	{r7, lr}
 172              	.LCFI6:
 173              		.cfi_def_cfa_offset 8
 174 0002 00AF     		add	r7, sp, #0
 175              		.cfi_offset 14, -4
 176              		.cfi_offset 7, -8
 177              	.LCFI7:
 178              		.cfi_def_cfa_register 7
  45:main.c        ****   static int c = 1;
  46:main.c        **** 
  47:main.c        ****   switch (ev_state)
 179              		.loc 2 47 0
 180 0004 40F20003 		movw	r3, #:lower16:ev_state
 181 0008 C0F20003 		movt	r3, #:upper16:ev_state
 182 000c 1B68     		ldr	r3, [r3, #0]
 183 000e 022B     		cmp	r3, #2
 184 0010 10D0     		beq	.L12
 185 0012 032B     		cmp	r3, #3
 186 0014 4AD0     		beq	.L13
 187 0016 012B     		cmp	r3, #1
 188 0018 40F08380 		bne	.L20
 189              	.L11:
  48:main.c        ****   {
  49:main.c        ****     // led always on
  50:main.c        ****     case STATE_A:
  51:main.c        ****     LED_ON;
 190              		.loc 2 51 0
 191 001c 40F60040 		movw	r0, #:lower16:1073810432
 192 0020 C4F20100 		movt	r0, #:upper16:1073810432
 193 0024 4FF02001 		mov	r1, #32
 194 0028 40F20003 		movw	r3, #:lower16:GPIO_SetBits
 195 002c C0F20003 		movt	r3, #:upper16:GPIO_SetBits
 196 0030 9847     		blx	r3
  52:main.c        ****     break;
 197              		.loc 2 52 0
 198 0032 85E0     		b	.L19
 199              	.L12:
  53:main.c        **** 
  54:main.c        ****     // 1Hz led flash
  55:main.c        ****     case STATE_B:
  56:main.c        ****     c++;
 200              		.loc 2 56 0
 201 0034 40F20003 		movw	r3, #:lower16:c.3175
 202 0038 C0F20003 		movt	r3, #:upper16:c.3175
 203 003c 1B68     		ldr	r3, [r3, #0]
 204 003e 03F10102 		add	r2, r3, #1
 205 0042 40F20003 		movw	r3, #:lower16:c.3175
 206 0046 C0F20003 		movt	r3, #:upper16:c.3175
 207 004a 1A60     		str	r2, [r3, #0]
  57:main.c        ****     if (c == 4000) // 200ms
 208              		.loc 2 57 0
 209 004c 40F20003 		movw	r3, #:lower16:c.3175
 210 0050 C0F20003 		movt	r3, #:upper16:c.3175
 211 0054 1B68     		ldr	r3, [r3, #0]
 212 0056 B3F57A6F 		cmp	r3, #4000
 213 005a 0BD1     		bne	.L15
  58:main.c        ****     {
  59:main.c        ****       LED_OFF;
 214              		.loc 2 59 0
 215 005c 40F60040 		movw	r0, #:lower16:1073810432
 216 0060 C4F20100 		movt	r0, #:upper16:1073810432
 217 0064 4FF02001 		mov	r1, #32
 218 0068 40F20003 		movw	r3, #:lower16:GPIO_ResetBits
 219 006c C0F20003 		movt	r3, #:upper16:GPIO_ResetBits
 220 0070 9847     		blx	r3
  60:main.c        ****     } else if (c > 40000) // 500s
  61:main.c        ****     {
  62:main.c        ****       LED_ON;
  63:main.c        ****       c = 1;
  64:main.c        ****     }
  65:main.c        ****     break;
 221              		.loc 2 65 0
 222 0072 65E0     		b	.L19
 223              	.L15:
 224              		.loc 2 60 0
 225 0074 40F20003 		movw	r3, #:lower16:c.3175
 226 0078 C0F20003 		movt	r3, #:upper16:c.3175
 227 007c 1A68     		ldr	r2, [r3, #0]
 228 007e 49F64043 		movw	r3, #40000
 229 0082 9A42     		cmp	r2, r3
 230 0084 59DD     		ble	.L21
 231              		.loc 2 62 0
 232 0086 40F60040 		movw	r0, #:lower16:1073810432
 233 008a C4F20100 		movt	r0, #:upper16:1073810432
 234 008e 4FF02001 		mov	r1, #32
 235 0092 40F20003 		movw	r3, #:lower16:GPIO_SetBits
 236 0096 C0F20003 		movt	r3, #:upper16:GPIO_SetBits
 237 009a 9847     		blx	r3
 238              		.loc 2 63 0
 239 009c 40F20003 		movw	r3, #:lower16:c.3175
 240 00a0 C0F20003 		movt	r3, #:upper16:c.3175
 241 00a4 4FF00102 		mov	r2, #1
 242 00a8 1A60     		str	r2, [r3, #0]
 243              		.loc 2 65 0
 244 00aa 49E0     		b	.L19
 245              	.L13:
  66:main.c        **** 
  67:main.c        ****     // 10Hz led flash
  68:main.c        ****     case STATE_C:
  69:main.c        ****     c++;
 246              		.loc 2 69 0
 247 00ac 40F20003 		movw	r3, #:lower16:c.3175
 248 00b0 C0F20003 		movt	r3, #:upper16:c.3175
 249 00b4 1B68     		ldr	r3, [r3, #0]
 250 00b6 03F10102 		add	r2, r3, #1
 251 00ba 40F20003 		movw	r3, #:lower16:c.3175
 252 00be C0F20003 		movt	r3, #:upper16:c.3175
 253 00c2 1A60     		str	r2, [r3, #0]
  70:main.c        ****     if (c == 2000) // 50ms
 254              		.loc 2 70 0
 255 00c4 40F20003 		movw	r3, #:lower16:c.3175
 256 00c8 C0F20003 		movt	r3, #:upper16:c.3175
 257 00cc 1B68     		ldr	r3, [r3, #0]
 258 00ce B3F5FA6F 		cmp	r3, #2000
 259 00d2 0BD1     		bne	.L17
  71:main.c        ****     {
  72:main.c        ****       LED_OFF;
 260              		.loc 2 72 0
 261 00d4 40F60040 		movw	r0, #:lower16:1073810432
 262 00d8 C4F20100 		movt	r0, #:upper16:1073810432
 263 00dc 4FF02001 		mov	r1, #32
 264 00e0 40F20003 		movw	r3, #:lower16:GPIO_ResetBits
 265 00e4 C0F20003 		movt	r3, #:upper16:GPIO_ResetBits
 266 00e8 9847     		blx	r3
  73:main.c        ****     } else if (c > 4000) // 100ms
  74:main.c        ****     {
  75:main.c        ****       LED_ON;
  76:main.c        ****       c = 1;
  77:main.c        ****     }
  78:main.c        ****     break;
 267              		.loc 2 78 0
 268 00ea 29E0     		b	.L19
 269              	.L17:
 270              		.loc 2 73 0
 271 00ec 40F20003 		movw	r3, #:lower16:c.3175
 272 00f0 C0F20003 		movt	r3, #:upper16:c.3175
 273 00f4 1B68     		ldr	r3, [r3, #0]
 274 00f6 B3F57A6F 		cmp	r3, #4000
 275 00fa 20DD     		ble	.L22
 276              		.loc 2 75 0
 277 00fc 40F60040 		movw	r0, #:lower16:1073810432
 278 0100 C4F20100 		movt	r0, #:upper16:1073810432
 279 0104 4FF02001 		mov	r1, #32
 280 0108 40F20003 		movw	r3, #:lower16:GPIO_SetBits
 281 010c C0F20003 		movt	r3, #:upper16:GPIO_SetBits
 282 0110 9847     		blx	r3
 283              		.loc 2 76 0
 284 0112 40F20003 		movw	r3, #:lower16:c.3175
 285 0116 C0F20003 		movt	r3, #:upper16:c.3175
 286 011a 4FF00102 		mov	r2, #1
 287 011e 1A60     		str	r2, [r3, #0]
 288              		.loc 2 78 0
 289 0120 0EE0     		b	.L19
 290              	.L20:
  79:main.c        **** 
  80:main.c        ****     // led always off
  81:main.c        ****     default:
  82:main.c        ****     LED_OFF;
 291              		.loc 2 82 0
 292 0122 40F60040 		movw	r0, #:lower16:1073810432
 293 0126 C4F20100 		movt	r0, #:upper16:1073810432
 294 012a 4FF02001 		mov	r1, #32
 295 012e 40F20003 		movw	r3, #:lower16:GPIO_ResetBits
 296 0132 C0F20003 		movt	r3, #:upper16:GPIO_ResetBits
 297 0136 9847     		blx	r3
 298 0138 02E0     		b	.L19
 299              	.L21:
 300              		.loc 2 65 0
 301 013a 00BF     		nop
 302 013c 00E0     		b	.L19
 303              	.L22:
 304              		.loc 2 78 0
 305 013e 00BF     		nop
 306              	.L19:
  83:main.c        ****     break;
  84:main.c        ****   }
  85:main.c        **** }
 307              		.loc 2 85 0
 308 0140 80BD     		pop	{r7, pc}
 309              		.cfi_endproc
 310              	.LFE29:
 312 0142 00BF     		.section	.text.manage_ev_state,"ax",%progbits
 313              		.align	2
 314              		.global	manage_ev_state
 315              		.thumb
 316              		.thumb_func
 318              	manage_ev_state:
 319              	.LFB30:
  86:main.c        **** 
  87:main.c        **** void manage_ev_state (void)
  88:main.c        **** {
 320              		.loc 2 88 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324 0000 80B5     		push	{r7, lr}
 325              	.LCFI8:
 326              		.cfi_def_cfa_offset 8
 327 0002 00AF     		add	r7, sp, #0
 328              		.cfi_offset 14, -4
 329              		.cfi_offset 7, -8
 330              	.LCFI9:
 331              		.cfi_def_cfa_register 7
  89:main.c        ****   static int value = 2640*100;
  90:main.c        **** 
  91:main.c        ****   //value = (((value * 99) + adc_get_value ()) / 100);
  92:main.c        ****   value = adc_get_value ();
 332              		.loc 2 92 0
 333 0004 40F20003 		movw	r3, #:lower16:adc_get_value
 334 0008 C0F20003 		movt	r3, #:upper16:adc_get_value
 335 000c 9847     		blx	r3
 336 000e 0346     		mov	r3, r0
 337 0010 1A46     		mov	r2, r3
 338 0012 40F20003 		movw	r3, #:lower16:value.3203
 339 0016 C0F20003 		movt	r3, #:upper16:value.3203
 340 001a 1A60     		str	r2, [r3, #0]
  93:main.c        **** 
  94:main.c        ****   if (value > STATE_A_VMIN)
 341              		.loc 2 94 0
 342 001c 40F20003 		movw	r3, #:lower16:value.3203
 343 0020 C0F20003 		movt	r3, #:upper16:value.3203
 344 0024 1A68     		ldr	r2, [r3, #0]
 345 0026 40F67413 		movw	r3, #2420
 346 002a 9A42     		cmp	r2, r3
 347 002c 07DD     		ble	.L24
  95:main.c        ****   {
  96:main.c        ****     ev_state = STATE_A;
 348              		.loc 2 96 0
 349 002e 40F20003 		movw	r3, #:lower16:ev_state
 350 0032 C0F20003 		movt	r3, #:upper16:ev_state
 351 0036 4FF00102 		mov	r2, #1
 352 003a 1A60     		str	r2, [r3, #0]
 353 003c 1FE0     		b	.L27
 354              	.L24:
  97:main.c        ****   }
  98:main.c        ****   else if (value > STATE_B_VMIN)
 355              		.loc 2 98 0
 356 003e 40F20003 		movw	r3, #:lower16:value.3203
 357 0042 C0F20003 		movt	r3, #:upper16:value.3203
 358 0046 1B68     		ldr	r3, [r3, #0]
 359 0048 B3F5DC6F 		cmp	r3, #1760
 360 004c 07DD     		ble	.L26
  99:main.c        ****   {
 100:main.c        ****     ev_state = STATE_B;
 361              		.loc 2 100 0
 362 004e 40F20003 		movw	r3, #:lower16:ev_state
 363 0052 C0F20003 		movt	r3, #:upper16:ev_state
 364 0056 4FF00202 		mov	r2, #2
 365 005a 1A60     		str	r2, [r3, #0]
 366 005c 0FE0     		b	.L27
 367              	.L26:
 101:main.c        ****   }
 102:main.c        ****   else if (value > STATE_C_VMIN)
 368              		.loc 2 102 0
 369 005e 40F20003 		movw	r3, #:lower16:value.3203
 370 0062 C0F20003 		movt	r3, #:upper16:value.3203
 371 0066 1A68     		ldr	r2, [r3, #0]
 372 0068 40F24C43 		movw	r3, #1100
 373 006c 9A42     		cmp	r2, r3
 374 006e 06DD     		ble	.L27
 103:main.c        ****   {
 104:main.c        ****     ev_state = STATE_C;
 375              		.loc 2 104 0
 376 0070 40F20003 		movw	r3, #:lower16:ev_state
 377 0074 C0F20003 		movt	r3, #:upper16:ev_state
 378 0078 4FF00302 		mov	r2, #3
 379 007c 1A60     		str	r2, [r3, #0]
 380              	.L27:
 105:main.c        ****   }
 106:main.c        ****   else
 107:main.c        ****   {
 108:main.c        ****     //ev_state = STATE_ERROR;
 109:main.c        ****   }
 110:main.c        **** 
 111:main.c        ****   //ev_state = STATE_B;
 112:main.c        **** }
 381              		.loc 2 112 0
 382 007e 80BD     		pop	{r7, pc}
 383              		.cfi_endproc
 384              	.LFE30:
 386              		.section	.text.manage_cp,"ax",%progbits
 387              		.align	2
 388              		.global	manage_cp
 389              		.thumb
 390              		.thumb_func
 392              	manage_cp:
 393              	.LFB31:
 113:main.c        **** 
 114:main.c        **** void manage_cp (void)
 115:main.c        **** {
 394              		.loc 2 115 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398 0000 80B5     		push	{r7, lr}
 399              	.LCFI10:
 400              		.cfi_def_cfa_offset 8
 401 0002 00AF     		add	r7, sp, #0
 402              		.cfi_offset 14, -4
 403              		.cfi_offset 7, -8
 404              	.LCFI11:
 405              		.cfi_def_cfa_register 7
 116:main.c        ****   static int c = 0;
 117:main.c        **** 
 118:main.c        ****   c++;
 406              		.loc 2 118 0
 407 0004 40F20003 		movw	r3, #:lower16:c.3221
 408 0008 C0F20003 		movt	r3, #:upper16:c.3221
 409 000c 1B68     		ldr	r3, [r3, #0]
 410 000e 03F10102 		add	r2, r3, #1
 411 0012 40F20003 		movw	r3, #:lower16:c.3221
 412 0016 C0F20003 		movt	r3, #:upper16:c.3221
 413 001a 1A60     		str	r2, [r3, #0]
 119:main.c        ****   if (c == 1) // 1*25us = 25us --> half of the on time of pilot signal
 414              		.loc 2 119 0
 415 001c 40F20003 		movw	r3, #:lower16:c.3221
 416 0020 C0F20003 		movt	r3, #:upper16:c.3221
 417 0024 1B68     		ldr	r3, [r3, #0]
 418 0026 012B     		cmp	r3, #1
 419 0028 04D1     		bne	.L29
 120:main.c        ****   {
 121:main.c        ****     // find current EV state
 122:main.c        ****     manage_ev_state ();
 420              		.loc 2 122 0
 421 002a 40F20003 		movw	r3, #:lower16:manage_ev_state
 422 002e C0F20003 		movt	r3, #:upper16:manage_ev_state
 423 0032 9847     		blx	r3
 424              	.L29:
 123:main.c        ****   }
 124:main.c        **** 
 125:main.c        ****   if (c == 2) // 2*25us = 50us, 5% pilot signal on time
 425              		.loc 2 125 0
 426 0034 40F20003 		movw	r3, #:lower16:c.3221
 427 0038 C0F20003 		movt	r3, #:upper16:c.3221
 428 003c 1B68     		ldr	r3, [r3, #0]
 429 003e 022B     		cmp	r3, #2
 430 0040 11D1     		bne	.L30
 126:main.c        ****   {
 127:main.c        ****     // disable pilot only if EV state is != STATE_A
 128:main.c        ****     if (ev_state != STATE_A)
 431              		.loc 2 128 0
 432 0042 40F20003 		movw	r3, #:lower16:ev_state
 433 0046 C0F20003 		movt	r3, #:upper16:ev_state
 434 004a 1B68     		ldr	r3, [r3, #0]
 435 004c 012B     		cmp	r3, #1
 436 004e 0AD0     		beq	.L30
 129:main.c        ****     {
 130:main.c        ****       PILOT_OFF;
 437              		.loc 2 130 0
 438 0050 40F60000 		movw	r0, #:lower16:1073809408
 439 0054 C4F20100 		movt	r0, #:upper16:1073809408
 440 0058 4FF48071 		mov	r1, #256
 441 005c 40F20003 		movw	r3, #:lower16:GPIO_SetBits
 442 0060 C0F20003 		movt	r3, #:upper16:GPIO_SetBits
 443 0064 9847     		blx	r3
 444              	.L30:
 131:main.c        ****     }
 132:main.c        ****   }
 133:main.c        **** 
 134:main.c        ****   if (c == 40) // 1ms --> 1kHz pilot signal
 445              		.loc 2 134 0
 446 0066 40F20003 		movw	r3, #:lower16:c.3221
 447 006a C0F20003 		movt	r3, #:upper16:c.3221
 448 006e 1B68     		ldr	r3, [r3, #0]
 449 0070 282B     		cmp	r3, #40
 450 0072 18D1     		bne	.L32
 135:main.c        ****   {
 136:main.c        ****     c = 0;
 451              		.loc 2 136 0
 452 0074 40F20003 		movw	r3, #:lower16:c.3221
 453 0078 C0F20003 		movt	r3, #:upper16:c.3221
 454 007c 4FF00002 		mov	r2, #0
 455 0080 1A60     		str	r2, [r3, #0]
 137:main.c        **** 
 138:main.c        ****     // enable pilot only if EV state is != STATE_ERROR;
 139:main.c        ****     if (ev_state != STATE_ERROR)
 456              		.loc 2 139 0
 457 0082 40F20003 		movw	r3, #:lower16:ev_state
 458 0086 C0F20003 		movt	r3, #:upper16:ev_state
 459 008a 1B68     		ldr	r3, [r3, #0]
 460 008c 002B     		cmp	r3, #0
 461 008e 0AD0     		beq	.L32
 140:main.c        ****     {
 141:main.c        ****       PILOT_ON;
 462              		.loc 2 141 0
 463 0090 40F60000 		movw	r0, #:lower16:1073809408
 464 0094 C4F20100 		movt	r0, #:upper16:1073809408
 465 0098 4FF48071 		mov	r1, #256
 466 009c 40F20003 		movw	r3, #:lower16:GPIO_ResetBits
 467 00a0 C0F20003 		movt	r3, #:upper16:GPIO_ResetBits
 468 00a4 9847     		blx	r3
 469              	.L32:
 142:main.c        ****     }
 143:main.c        ****   }
 144:main.c        **** }
 470              		.loc 2 144 0
 471 00a6 80BD     		pop	{r7, pc}
 472              		.cfi_endproc
 473              	.LFE31:
 475              		.section	.text.SysTick_Handler,"ax",%progbits
 476              		.align	2
 477              		.global	SysTick_Handler
 478              		.thumb
 479              		.thumb_func
 481              	SysTick_Handler:
 482              	.LFB32:
 145:main.c        **** 
 146:main.c        **** void SysTick_Handler(void)
 147:main.c        **** {
 483              		.loc 2 147 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 1, uses_anonymous_args = 0
 487 0000 80B5     		push	{r7, lr}
 488              	.LCFI12:
 489              		.cfi_def_cfa_offset 8
 490 0002 00AF     		add	r7, sp, #0
 491              		.cfi_offset 14, -4
 492              		.cfi_offset 7, -8
 493              	.LCFI13:
 494              		.cfi_def_cfa_register 7
 148:main.c        ****   manage_cp ();
 495              		.loc 2 148 0
 496 0004 40F20003 		movw	r3, #:lower16:manage_cp
 497 0008 C0F20003 		movt	r3, #:upper16:manage_cp
 498 000c 9847     		blx	r3
 149:main.c        **** 
 150:main.c        ****   manage_led ();
 499              		.loc 2 150 0
 500 000e 40F20003 		movw	r3, #:lower16:manage_led
 501 0012 C0F20003 		movt	r3, #:upper16:manage_led
 502 0016 9847     		blx	r3
 151:main.c        **** }
 503              		.loc 2 151 0
 504 0018 80BD     		pop	{r7, pc}
 505              		.cfi_endproc
 506              	.LFE32:
 508 001a 00BF     		.section	.text.initialize,"ax",%progbits
 509              		.align	2
 510              		.global	initialize
 511              		.thumb
 512              		.thumb_func
 514              	initialize:
 515              	.LFB33:
 152:main.c        **** 
 153:main.c        **** void initialize (void)
 154:main.c        **** {
 516              		.loc 2 154 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 0
 519              		@ frame_needed = 1, uses_anonymous_args = 0
 520 0000 80B5     		push	{r7, lr}
 521              	.LCFI14:
 522              		.cfi_def_cfa_offset 8
 523 0002 00AF     		add	r7, sp, #0
 524              		.cfi_offset 14, -4
 525              		.cfi_offset 7, -8
 526              	.LCFI15:
 527              		.cfi_def_cfa_register 7
 155:main.c        ****   gpio_init ();
 528              		.loc 2 155 0
 529 0004 40F20003 		movw	r3, #:lower16:gpio_init
 530 0008 C0F20003 		movt	r3, #:upper16:gpio_init
 531 000c 9847     		blx	r3
 156:main.c        ****   adc_init ();
 532              		.loc 2 156 0
 533 000e 40F20003 		movw	r3, #:lower16:adc_init
 534 0012 C0F20003 		movt	r3, #:upper16:adc_init
 535 0016 9847     		blx	r3
 157:main.c        **** 
 158:main.c        ****   /* Setup SysTick Timer for 25us interrupts, also enables Systick and Systick-Interrupt */
 159:main.c        ****   if (SysTick_Config(600))
 536              		.loc 2 159 0
 537 0018 4FF41670 		mov	r0, #600
 538 001c 40F20003 		movw	r3, #:lower16:SysTick_Config
 539 0020 C0F20003 		movt	r3, #:upper16:SysTick_Config
 540 0024 9847     		blx	r3
 541 0026 0346     		mov	r3, r0
 542 0028 002B     		cmp	r3, #0
 543 002a 00D0     		beq	.L38
 544              	.L37:
 160:main.c        ****   {
 161:main.c        ****     /* Capture error */
 162:main.c        ****     while (1);
 545              		.loc 2 162 0
 546 002c FEE7     		b	.L37
 547              	.L38:
 163:main.c        ****   }
 164:main.c        **** }
 548              		.loc 2 164 0
 549 002e 80BD     		pop	{r7, pc}
 550              		.cfi_endproc
 551              	.LFE33:
 553              		.section	.text.main,"ax",%progbits
 554              		.align	2
 555              		.global	main
 556              		.thumb
 557              		.thumb_func
 559              	main:
 560              	.LFB34:
 165:main.c        **** 
 166:main.c        **** int main (void)
 167:main.c        **** {
 561              		.loc 2 167 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565 0000 80B5     		push	{r7, lr}
 566              	.LCFI16:
 567              		.cfi_def_cfa_offset 8
 568 0002 00AF     		add	r7, sp, #0
 569              		.cfi_offset 14, -4
 570              		.cfi_offset 7, -8
 571              	.LCFI17:
 572              		.cfi_def_cfa_register 7
 168:main.c        ****   initialize ();
 573              		.loc 2 168 0
 574 0004 40F20003 		movw	r3, #:lower16:initialize
 575 0008 C0F20003 		movt	r3, #:upper16:initialize
 576 000c 9847     		blx	r3
 577              	.L40:
 169:main.c        **** 
 170:main.c        ****   while (1)
 171:main.c        ****   {
 172:main.c        **** 
 173:main.c        ****   }
 578              		.loc 2 173 0
 579 000e FEE7     		b	.L40
 580              		.cfi_endproc
 581              	.LFE34:
 583              		.section	.bss.c.3221,"aw",%nobits
 584              		.align	2
 587              	c.3221:
 588 0000 00000000 		.space	4
 589              		.section	.data.value.3203,"aw",%progbits
 590              		.align	2
 593              	value.3203:
 594 0000 40070400 		.word	264000
 595              		.section	.data.c.3175,"aw",%progbits
 596              		.align	2
 599              	c.3175:
 600 0000 01000000 		.word	1
 601              		.text
 602              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccFeZpbW.s:24     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccFeZpbW.s:28     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccFeZpbW.s:87     .text.SysTick_Config:00000000 $t
     /tmp/ccFeZpbW.s:91     .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccFeZpbW.s:156    .data.ev_state:00000000 ev_state
     /tmp/ccFeZpbW.s:153    .data.ev_state:00000000 $d
     /tmp/ccFeZpbW.s:159    .text.manage_led:00000000 $t
     /tmp/ccFeZpbW.s:164    .text.manage_led:00000000 manage_led
     /tmp/ccFeZpbW.s:599    .data.c.3175:00000000 c.3175
     /tmp/ccFeZpbW.s:313    .text.manage_ev_state:00000000 $t
     /tmp/ccFeZpbW.s:318    .text.manage_ev_state:00000000 manage_ev_state
     /tmp/ccFeZpbW.s:593    .data.value.3203:00000000 value.3203
     /tmp/ccFeZpbW.s:387    .text.manage_cp:00000000 $t
     /tmp/ccFeZpbW.s:392    .text.manage_cp:00000000 manage_cp
     /tmp/ccFeZpbW.s:587    .bss.c.3221:00000000 c.3221
     /tmp/ccFeZpbW.s:476    .text.SysTick_Handler:00000000 $t
     /tmp/ccFeZpbW.s:481    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccFeZpbW.s:509    .text.initialize:00000000 $t
     /tmp/ccFeZpbW.s:514    .text.initialize:00000000 initialize
     /tmp/ccFeZpbW.s:554    .text.main:00000000 $t
     /tmp/ccFeZpbW.s:559    .text.main:00000000 main
     /tmp/ccFeZpbW.s:584    .bss.c.3221:00000000 $d
     /tmp/ccFeZpbW.s:590    .data.value.3203:00000000 $d
     /tmp/ccFeZpbW.s:596    .data.c.3175:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GPIO_SetBits
GPIO_ResetBits
adc_get_value
gpio_init
adc_init
